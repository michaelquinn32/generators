% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/limit.R
\name{limit}
\alias{limit}
\title{Set the limit of an iterator}
\usage{
limit(.generator, .limit)
}
\arguments{
\item{.generator}{A function with the class \code{generator}}

\item{.limit}{A predicate function, returning \code{TRUE} or \code{FALSE}}
}
\description{
The limit of the generator refers to the output series, not the underlying
state. This approach tends to be more intuitive, especially when the state
is a vector (like the Fibonacci numbers).
}
\details{
When the limiting function returns \code{TRUE}, a generator is considered
exhausted. Additional calls to an exhausted generator return an error.
}
\examples{
# A typical case
counter <- generator(0, function (state) state + 1)
limited <- counter \%>\% limit(~ state < 4)
limited \%>\% take(3)

# Returns an error
\dontrun{limited()}

# Fibonacci numbers
fib <- generator(c(0, 1),
                 ~ c(state[2], sum(state)),
                 ~ state[1])
limited <- fib \%>\% limit(~ state < 5)
limited \%>\% take(4)

# Returns an error
\dontrun{limited()}

}

